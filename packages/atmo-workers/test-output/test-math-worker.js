// test-math-worker.js - Mathematical operations worker
// Generated by @wonderlandlabs/atmo-workers

let myWorkerId = null; // Store worker ID for self-identification

self.onmessage = function(e) {
  const { message, taskId, content, workerId } = e.data;
  
  switch (message) {
    case 'init-worker':
      // Worker initialization - record our ID for future messages
      myWorkerId = e.data.id;
      self.postMessage({
        message: 'worker-ready',
        workerId: myWorkerId,
        content: { tasks: e.data.content }
      });
      break;
      
    case 'worker-work':
      handleTask(taskId, content);
      break;
  }
};

async function handleTask(taskId, content) {
  try {
    const { name, params } = content;
    let result;
    
    switch (name) {
    case 'add':
      result = params.a + params.b;
      break;
    case 'subtract':
      result = params.a - params.b;
      break;
    case 'multiply':
      result = params.a * params.b;
      break;
    case 'divide':
      if (params.b === 0) {
        throw new Error('Division by zero is not allowed');
      }
      result = params.a / params.b;
      break;
    case 'power':
      result = Math.pow(params.a, params.b);
      break;
    case 'sqrt':
      if (params.a < 0) {
        throw new Error('Cannot calculate square root of negative number');
      }
      result = Math.sqrt(params.a);
      break;
    default:
      throw new Error(`Unknown task: ${name}`);
    }
    
    // Send successful result
    self.postMessage({
      message: 'worker-response',
      taskId,
      workerId: myWorkerId,
      content: result
    });
  } catch (error) {
    // Send error response
    self.postMessage({
      message: 'worker-response',
      taskId,
      workerId: myWorkerId,
      error: error.message
    });
  }
}

// Helper functions can be added here
function logWorkerInfo(message) {
  console.log(`[${myWorkerId}] ${message}`);
}
