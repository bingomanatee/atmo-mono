#!/usr/bin/env node

import { readFileSync, writeFileSync, mkdirSync, existsSync } from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// CLI argument parsing
const args = process.argv.slice(2);
const workerName = args[0];
const outputDir = args[1] || "./workers";
const workerType = args[2] || "browser"; // 'browser' or 'server'

if (!workerName) {
  console.error(
    "Usage: npm run generate-worker <worker-name> [output-dir] [type]"
  );
  console.error(
    "Example: npm run generate-worker math-worker ./public/workers browser"
  );
  console.error(
    "Example: npm run generate-worker math-worker ./workers server"
  );
  process.exit(1);
}

if (!["browser", "server"].includes(workerType)) {
  console.error('Worker type must be "browser" or "server"');
  process.exit(1);
}

// Ensure output directory exists
if (!existsSync(outputDir)) {
  mkdirSync(outputDir, { recursive: true });
  console.log(`Created directory: ${outputDir}`);
}

// Worker templates
const templates = {
  math: {
    tasks: ["add", "subtract", "multiply", "divide", "power", "sqrt"],
    description: "Mathematical operations worker",
    implementation: `
    case 'add':
      result = params.a + params.b;
      break;
    case 'subtract':
      result = params.a - params.b;
      break;
    case 'multiply':
      result = params.a * params.b;
      break;
    case 'divide':
      if (params.b === 0) {
        throw new Error('Division by zero is not allowed');
      }
      result = params.a / params.b;
      break;
    case 'power':
      result = Math.pow(params.a, params.b);
      break;
    case 'sqrt':
      if (params.a < 0) {
        throw new Error('Cannot calculate square root of negative number');
      }
      result = Math.sqrt(params.a);
      break;`,
  },

  data: {
    tasks: ["fetch", "transform", "validate", "filter"],
    description: "Data processing worker",
    implementation: `
    case 'fetch':
      // Simulate data fetching
      result = await new Promise(resolve => {
        setTimeout(() => {
          resolve({ data: params.url ? \`Data from \${params.url}\` : 'Sample data' });
        }, 100);
      });
      break;
    case 'transform':
      result = params.data.map(item => ({
        ...item,
        transformed: true,
        timestamp: Date.now()
      }));
      break;
    case 'validate':
      result = {
        valid: params.data && typeof params.data === 'object',
        errors: params.data ? [] : ['Data is required']
      };
      break;
    case 'filter':
      result = params.data.filter(item => 
        params.criteria ? item[params.criteria.field] === params.criteria.value : true
      );
      break;`,
  },

  image: {
    tasks: ["resize", "compress", "filter", "analyze"],
    description: "Image processing worker",
    implementation: `
    case 'resize':
      // Simulate image resizing
      result = {
        width: params.width || 800,
        height: params.height || 600,
        originalSize: params.originalSize || { width: 1920, height: 1080 },
        processed: true
      };
      break;
    case 'compress':
      result = {
        originalSize: params.size || 1024000,
        compressedSize: Math.floor((params.size || 1024000) * (params.quality || 0.8)),
        quality: params.quality || 0.8
      };
      break;
    case 'filter':
      result = {
        filter: params.filter || 'none',
        applied: true,
        timestamp: Date.now()
      };
      break;
    case 'analyze':
      result = {
        dimensions: params.dimensions || { width: 800, height: 600 },
        format: params.format || 'jpeg',
        colors: Math.floor(Math.random() * 1000000),
        brightness: Math.random()
      };
      break;`,
  },
};

// Detect worker type from name
function detectWorkerType(name) {
  const lowerName = name.toLowerCase();
  if (lowerName.includes("math") || lowerName.includes("calc")) return "math";
  if (lowerName.includes("data") || lowerName.includes("api")) return "data";
  if (lowerName.includes("image") || lowerName.includes("img")) return "image";
  return "math"; // default
}

const detectedType = detectWorkerType(workerName);
const template = templates[detectedType];

console.log(
  `Generating ${template.description} (${workerName}) for ${workerType}...`
);
console.log(`Tasks: ${template.tasks.join(", ")}`);

// Generate worker script based on type
const workerScript =
  workerType === "server"
    ? generateServerWorker(workerName, template)
    : generateBrowserWorker(workerName, template);

function generateBrowserWorker(name, template) {
  return `// ${name}.js - ${template.description}
// Generated by @wonderlandlabs/atmo-workers

let myWorkerId = null;

self.onmessage = function(e) {
  const { message, taskId, content, workerId } = e.data;

  switch (message) {
    case 'init-worker':
      myWorkerId = e.data.id;
      self.postMessage({
        message: 'worker-ready',
        workerId: myWorkerId,
        content: { tasks: e.data.content }
      });
      break;

    case 'worker-work':
      handleTask(taskId, content);
      break;
  }
};

async function handleTask(taskId, content) {
  try {
    const { name, params } = content;
    let result;

    switch (name) {${template.implementation}
    default:
      throw new Error(\`Unknown task: \${name}\`);
    }

    self.postMessage({
      message: 'worker-response',
      taskId,
      workerId: myWorkerId,
      content: result
    });
  } catch (error) {
    self.postMessage({
      message: 'worker-response',
      taskId,
      workerId: myWorkerId,
      error: error.message
    });
  }
}

function logWorkerInfo(message) {
  console.log(\`[\${myWorkerId}] \${message}\`);
}
`;
}

function generateServerWorker(name, template) {
  return `// ${name}.js - ${template.description}
// Generated by @wonderlandlabs/atmo-workers

const { parentPort } = require('worker_threads');

let myWorkerId = null;

if (parentPort) {
  parentPort.on('message', (data) => {
    const { message, taskId, content, workerId } = data;

    switch (message) {
      case 'init-worker':
        myWorkerId = data.id;
        parentPort.postMessage({
          message: 'worker-ready',
          workerId: myWorkerId,
          content: { tasks: data.content }
        });
        break;

      case 'worker-work':
        handleTask(taskId, content);
        break;
    }
  });
}

async function handleTask(taskId, content) {
  try {
    const { name, params } = content;
    let result;

    switch (name) {${template.implementation}
    default:
      throw new Error(\`Unknown task: \${name}\`);
    }

    if (parentPort) {
      parentPort.postMessage({
        message: 'worker-response',
        taskId,
        workerId: myWorkerId,
        content: result
      });
    }
  } catch (error) {
    if (parentPort) {
      parentPort.postMessage({
        message: 'worker-response',
        taskId,
        workerId: myWorkerId,
        error: error.message
      });
    }
  }
}

function logWorkerInfo(message) {
  console.log(\`[Server Worker \${myWorkerId}] \${message}\`);
}
`;
}

// Generate usage example
const usageExample =
  workerType === "server"
    ? generateServerExample(workerName, template, outputDir)
    : generateBrowserExample(workerName, template, outputDir);

function generateBrowserExample(name, template, dir) {
  return `// Example usage for ${name}
import { TaskManager, BrowserWorkerManager } from '@wonderlandlabs/atmo-workers';

// Create task manager
const taskManager = new TaskManager();

// Create worker manager with ${name}
const workerManager = new BrowserWorkerManager({
  manager: taskManager,
  configs: [
    {
      tasks: ${JSON.stringify(template.tasks, null, 6)},
      script: '${dir}/${name}.js'
    }
  ]
});

// Example tasks for ${template.description}
${generateExampleTasks(template.tasks)}

// Cleanup when done
function cleanup() {
  workerManager.close();
  taskManager.close();
}

// Optional: cleanup on page unload
window.addEventListener('beforeunload', cleanup);
`;
}

function generateServerExample(name, template, dir) {
  return `// Example usage for ${name}
const { TaskManager, ServerWorkerManager } = require('@wonderlandlabs/atmo-workers');
const path = require('path');

// Create task manager
const taskManager = new TaskManager();

// Create worker manager with ${name}
const workerManager = new ServerWorkerManager({
  manager: taskManager,
  configs: [
    {
      tasks: ${JSON.stringify(template.tasks, null, 6)},
      script: path.join(__dirname, '${name}.js')
    }
  ]
});

// Example tasks for ${template.description}
${generateExampleTasks(template.tasks)}

// Cleanup when done
function cleanup() {
  workerManager.close();
  taskManager.close();
}

// Optional: cleanup on process exit
process.on('SIGINT', cleanup);
process.on('SIGTERM', cleanup);
`;
}

function generateExampleTasks(tasks) {
  const type = detectedType;
  const examples = {
    math: `
// Basic math operations
taskManager.addTask({
  name: 'add',
  params: { a: 10, b: 5 },
  onSuccess: (result) => console.log('10 + 5 =', result.content),
  onError: (error) => console.error('Math error:', error.error)
});

taskManager.addTask({
  name: 'divide',
  params: { a: 20, b: 4 },
  onSuccess: (result) => console.log('20 / 4 =', result.content)
});

taskManager.addTask({
  name: 'sqrt',
  params: { a: 16 },
  onSuccess: (result) => console.log('âˆš16 =', result.content)
});`,

    data: `
// Data processing operations
taskManager.addTask({
  name: 'fetch',
  params: { url: 'https://api.example.com/data' },
  onSuccess: (result) => console.log('Fetched:', result.content),
  onError: (error) => console.error('Fetch error:', error.error)
});

taskManager.addTask({
  name: 'transform',
  params: { 
    data: [{ id: 1, name: 'Item 1' }, { id: 2, name: 'Item 2' }] 
  },
  onSuccess: (result) => console.log('Transformed:', result.content)
});

taskManager.addTask({
  name: 'filter',
  params: { 
    data: [{ type: 'A', value: 1 }, { type: 'B', value: 2 }],
    criteria: { field: 'type', value: 'A' }
  },
  onSuccess: (result) => console.log('Filtered:', result.content)
});`,

    image: `
// Image processing operations
taskManager.addTask({
  name: 'resize',
  params: { width: 800, height: 600, originalSize: { width: 1920, height: 1080 } },
  onSuccess: (result) => console.log('Resized:', result.content),
  onError: (error) => console.error('Resize error:', error.error)
});

taskManager.addTask({
  name: 'compress',
  params: { size: 1024000, quality: 0.8 },
  onSuccess: (result) => console.log('Compressed:', result.content)
});

taskManager.addTask({
  name: 'analyze',
  params: { dimensions: { width: 800, height: 600 }, format: 'jpeg' },
  onSuccess: (result) => console.log('Analysis:', result.content)
});`,
  };

  return examples[type] || examples.math;
}

// Write files
const workerPath = join(outputDir, `${workerName}.js`);
const examplePath = join(outputDir, `${workerName}-example.js`);

writeFileSync(workerPath, workerScript);
writeFileSync(examplePath, usageExample);

console.log(`\nâœ… Generated worker files:`);
console.log(`   ðŸ“„ Worker: ${workerPath}`);
console.log(`   ðŸ“„ Example: ${examplePath}`);
console.log(`\nðŸš€ To use this worker:`);
console.log(`   1. Include the worker script in your project`);
console.log(`   2. Update the script path in your worker configuration`);
console.log(`   3. Run the example code to test the worker`);
console.log(`\nðŸ“š Available tasks: ${template.tasks.join(", ")}`);
